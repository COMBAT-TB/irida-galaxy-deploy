- name: Include variables.
  include_vars: 
    file: "vars/all.yml"
    name: all

- name: Run the equivalent of "apt-get update" as a separate step
  apt:
    update_cache: yes

- name: Upgrade all packages to the latest version
  apt:
    name: "*"
    state: latest
    force_apt_get: yes
  
- name: Install a list of packages
  apt:
    name: "{{ all.packages }}"  
    install_recommends: no

- name: Creates irida home dir
  file:
    path: /etc/irida
    state: directory

- name: Clean the apt list PATH
  file:
    state: absent
    path: "{{ all.apt_list_path }}" 
 
- name: Setting variables for GOSU
  shell: "echo $dpkgArch"
  environment:
    dpkgArch: "$(dpkg --print-architecture | awk -F- '{ print $NF }')"
  register: irida_gosu_variables
- debug:
    var: irida_gosu_variables.stdout

- name: Install dependencies 
  shell: "{{ item }}"
  with_items:
    - dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"
    - wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/1.10/gosu-amd64"
    - wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/1.10/gosu-amd64.asc"
    - export GNUPGHOME="$(mktemp -d)"

- name: Install more dependencies 
  shell: "{{ item }}"
  with_items:
    - gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4
    - gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu
    - rm -r "$(mktemp -d)" /usr/local/bin/gosu.asc
    - chmod +x /usr/local/bin/gosu
    - gosu nobody true
    
- name: Creates Irida data dir
  file:
    path: "{{all.irida_data_dir}}/data"
    state: directory

- name: Download IRIDA war file
  get_url:
    url: https://github.com/COMBAT-TB/irida/releases/download/v19.01.1-sanbi/irida-19.01.1.war
    dest: /opt/tomcat/apache-tomcat-8.5.32/webapps/irida.war

- name: Creates IRIDA Data subdirectories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{all.irida_data_dir}}/sequence"
    - "{{all.irida_data_dir}}/reference"
    - "{{all.irida_data_dir}}/output"
- debug:
    var: gxadminuser.stdout

- name: Setting variables for JAVA_OPTS
  shell: "echo $JAVA_OPTS"
  environment:
    JAVA_OPTS: -Dspring.profiles.active=prod -Ddandelion.profile.active=prod
  register: javaopts
- debug:
    var: javaopts.stdout

- name: Setting variables for GALAXY admin user
  shell: "echo $GALAXY_ADMIN_USER"
  environment:
    GALAXY_ADMIN_USER: zipho@sanbi.ac.za
  register: gxadminuser
- debug:
    var: gxadminuser.stdout

- name: Setting variables for IRIDA StartUp
  shell: "echo $IRIDA_VERSION"
  environment:
    IRIDA_VERSION: "{{all.irida_version}}"
    IRIDA_DATA_DIR: "{{all.irida_data_dir}}"
  register: irida_startup
- debug:
    var: irida_startup.stdout

- name: install WEB configuration
  template:
    src: web.conf.j2
    dest: /etc/irida/web.conf
  
- name: install IRIDA configuration
  template:
    src: irida.conf.j2
    dest: /etc/irida/irida.conf

# create user and grant priviledges
- mysql_user:
    name: "{{all.mysql_user}}"
    password: "{{all.mysql_password}}"
    priv: '*.*:ALL'
    state: present

# create a database
- name: Create a new database with name 'irida_db'
  mysql_db:
    name: "{{all.mysql_database}}"
    state: present

# create irida plugin directory    
- name: Creates Irida plugin dir
  file:
    path: "/etc/irida/plugins"
    state: directory

# install irida pipeline plugins
- name: install IRIDA Snippy pipeline plugin
  template:
    src: irida-snippy-pipeline-plugin-0.1.0-SNAPSHOT.jar.j2
    dest: /etc/irida/plugins/irida-snippy-pipeline-plugin-0.1.0-SNAPSHOT.jar

- name: install IRIDA SANBI BVC pipeline plugin
  template:
    src: sanbi-bvc-plugin-0.1.0-SNAPSHOT.jar.j2
    dest: /etc/irida/plugins/sanbi-bvc-plugin-0.1.0-SNAPSHOT.jar

# TOMCAT section ---------------------------------------------------------
- name: copy TOMCAT environmental variables
  template:
    src: setenv.sh.j2
    dest: "{{ all.irida_tomcat_home }}/bin/setenv.sh"
    owner: root
    group: tomcat
    mode: 775

- name: install tomcat startup script
  template:
    src: tomcat.j2
    dest: /etc/init.d/tomcat
    owner: root
    group: root
    mode: 775

- name: Create symbolic link of custom tomcat to the runlevels
  file:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    state: link
  with_items:
    - { src: '/etc/init.d/tomcat', dest: '/etc/rc0.d/K26tomcat' }
    - { src: '/etc/init.d/tomcat', dest: '/etc/rc6.d/K26tomcat' }
    - { src: '/etc/init.d/tomcat', dest: '/etc/rc3.d/S81tomcat' }
    - { src: '/etc/init.d/tomcat', dest: '/etc/rc2.d/S81tomcat' }
    - { src: '/etc/init.d/tomcat', dest: '/etc/rc5.d/S81tomcat' }

