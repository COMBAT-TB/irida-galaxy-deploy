- name: Include variables.
  include_vars:
      file: "vars/all.yml"
      name: all

- name: Run the equivalent of "apt-get update" as a separate step
  apt:
      update_cache: yes

- name: Upgrade all packages to the latest version
  apt:
      name: "*"
      state: latest
      force_apt_get: yes

- name: Install a list of packages
  apt:
      name: "{{ all.packages }}"
      install_recommends: no

- name: Creates irida home dir
  file:
      path: /etc/irida
      state: directory

- name: Clean the apt list PATH
  file:
      state: absent
      path: "{{ all.apt_list_path }}"

- name: Setting variables for GOSU
  shell: "echo $dpkgArch"
  environment:
      dpkgArch: "$(dpkg --print-architecture | awk -F- '{ print $NF }')"
  register: irida_gosu_variables
- debug:
      var: irida_gosu_variables.stdout

- name: Install dependencies
  shell: "{{ item }}"
  with_items:
      - dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"
      # - wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/1.10/gosu-$dpkgArch"
      # - wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/1.10/gosu-$dpkgArch.asc"
      - wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/1.10/gosu-amd64"
      - wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/1.10/gosu-amd64.asc"
      - export GNUPGHOME="$(mktemp -d)"

- name: Install more dependencies
  shell: "{{ item }}"
  with_items:
      - gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4
      - gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu
      - rm -r "$(mktemp -d)" /usr/local/bin/gosu.asc
      - chmod +x /usr/local/bin/gosu
      - gosu nobody true

- name: Creates Irida data dir
  file:
      path: "{{all.irida_data_dir}}"
      state: directory

- name: Download IRIDA war file
  get_url:
      url: https://github.com/SANBI-SA/irida/releases/download/sanbi-bvc-test/irida-0.17.1.war
      dest: "{{ all.irida_tomcat_home }}/webapps/irida.war"

- name: Creates IRIDA Data subdirectories
  file:
      path: "{{ item }}"
      state: directory
  with_items:
      - "{{all.irida_data_dir}}/sequence"
      - "{{all.irida_data_dir}}/reference"
      - "{{all.irida_data_dir}}/output"
- debug:
      var: gxadminuser.stdout

- name: Setting variables for JAVA_OPTS
  shell: "echo $JAVA_OPTS"
  environment:
      JAVA_OPTS: -Dspring.profiles.active=prod -Ddandelion.profile.active=prod
  register: javaopts
- debug:
      var: javaopts.stdout

- name: Setting variables for GALAXY admin user
  shell: "echo $GALAXY_ADMIN_USER"
  environment:
      GALAXY_ADMIN_USER: irida@sanbi.ac.za
  register: gxadminuser
- debug:
      var: gxadminuser.stdout

- name: Setting variables for IRIDA StartUp
  shell: "echo $IRIDA_VERSION"
  environment:
      IRIDA_VERSION: "{{all.irida_version}}"
      IRIDA_DATA_DIR: "{{all.irida_data_dir}}"
  register: irida_startup
- debug:
      var: irida_startup.stdout

- name: install WEB configuration
  template:
      src: web.conf.j2
      dest: /etc/irida/web.conf

- name: install IRIDA configuration
  template:
      src: irida.conf.j2
      dest: /etc/irida/irida.conf

# MYSQL section --------------------------------------------------------
# - name: Irida mysql IRIDA configuration
#   template:
#     src: mysql_config.sql.j2
#     dest: "{{ all.irida_tomcat_home }}/bin/mysql_config.sql"

# Copy database dump file to remote host and restore it to database 'irida_db'
# - name: Copy database dump file
#   template:
#     src: mysql_config.sql.j2
#     dest: /tmp/mysql_config.sql

# - name: Run the mysql_config.sql
#   mysql_db:
#     name: irida_db
#     state: import
#     target: /tmp/mysql_config.sql

# create user and grant priviledges
- mysql_user:
      name: "{{all.mysql_user}}"
      password: "{{all.mysql_password}}"
      priv: "*.*:ALL"
      state: present

# create a database
- name: Create a new database with name 'irida_db'
  mysql_db:
      name: "{{all.mysql_database}}"
      state: present

# Set sql_mode variable for liquibase to work -- report issue to irida
# - mysql_variables:
#     variable: sql_mode
#     value: 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'

# TOMCAT section ---------------------------------------------------------
- name: copy TOMCAT environmental variables
  template:
      src: setenv.sh.j2
      dest: "{{ all.irida_tomcat_home }}/bin/setenv.sh"
      owner: root
      group: tomcat
      mode: 775
# - name: install tomcat startup script
#   template:
#       src: tomcat.j2
#       dest: /etc/init.d/tomcat
#       owner: root
#       group: root
#       mode: 775

# - name: Create symbolic link of custom tomcat to the runlevels
#   file:
#       src: "{{ item.src }}"
#       dest: "{{ item.dest }}"
#       state: link
#   with_items:
#       - { src: "/etc/init.d/tomcat", dest: "/etc/rc0.d/K26tomcat" }
#       - { src: "/etc/init.d/tomcat", dest: "/etc/rc6.d/K26tomcat" }
#       - { src: "/etc/init.d/tomcat", dest: "/etc/rc3.d/S81tomcat" }
#       - { src: "/etc/init.d/tomcat", dest: "/etc/rc2.d/S81tomcat" }
#       - { src: "/etc/init.d/tomcat", dest: "/etc/rc5.d/S81tomcat" }
